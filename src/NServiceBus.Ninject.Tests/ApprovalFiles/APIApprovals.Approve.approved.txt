[assembly: System.CLSCompliantAttribute(true)]
[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(@"NServiceBus.Ninject.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100dde965e6172e019ac82c2639ffe494dd2e7dd16347c34762a05732b492e110f2e4e2e1b5ef2d85c848ccfb671ee20a47c8d1376276708dc30a90ff1121b647ba3b7259a6bc383b2034938ef0e275b58b920375ac605076178123693c6c4f1331661a62eba28c249386855637780e3ff5f23a6d854700eaa6803ef48907513b92")]
[assembly: System.Runtime.InteropServices.ComVisibleAttribute(false)]
namespace NServiceBus
{
    [System.ObsoleteAttribute(@"Support for external dependency injection containers is no longer provided by NServiceBus adapters for each container library. Instead, the NServiceBus.Extensions.DependencyInjection library provides the ability to use any container that conforms to the Microsoft.Extensions.DependencyInjection container abstraction. Will be treated as an error from version 8.0.0. Will be removed in version 9.0.0.", false)]
    public class NinjectBuilder : NServiceBus.Container.ContainerDefinition
    {
        public NinjectBuilder() { }
        public override NServiceBus.ObjectBuilder.Common.IContainer CreateContainer(NServiceBus.Settings.ReadOnlySettings settings) { }
    }
    [System.ObsoleteAttribute(@"Support for external dependency injection containers is no longer provided by NServiceBus adapters for each container library. Instead, the NServiceBus.Extensions.DependencyInjection library provides the ability to use any container that conforms to the Microsoft.Extensions.DependencyInjection container abstraction. Will be treated as an error from version 8.0.0. Will be removed in version 9.0.0.", false)]
    public class static NinjectExtensions
    {
        [System.ObsoleteAttribute(@"Support for external dependency injection containers is no longer provided by NServiceBus adapters for each container library. Instead, the NServiceBus.Extensions.DependencyInjection library provides the ability to use any container that conforms to the Microsoft.Extensions.DependencyInjection container abstraction. Will be treated as an error from version 8.0.0. Will be removed in version 9.0.0.", false)]
        public static void ExistingKernel(this NServiceBus.Container.ContainerCustomizations customizations, Ninject.IKernel kernel) { }
    }
}
namespace NServiceBus.ObjectBuilder.Ninject
{
    [System.ObsoleteAttribute(@"Support for external dependency injection containers is no longer provided by NServiceBus adapters for each container library. Instead, the NServiceBus.Extensions.DependencyInjection library provides the ability to use any container that conforms to the Microsoft.Extensions.DependencyInjection container abstraction. Will be treated as an error from version 8.0.0. Will be removed in version 9.0.0.", false)]
    public class static NinjectObjectBuilderExtensions
    {
        [System.ObsoleteAttribute(@"Support for external dependency injection containers is no longer provided by NServiceBus adapters for each container library. Instead, the NServiceBus.Extensions.DependencyInjection library provides the ability to use any container that conforms to the Microsoft.Extensions.DependencyInjection container abstraction. Will be treated as an error from version 8.0.0. Will be removed in version 9.0.0.", false)]
        public static Ninject.Syntax.IBindingNamedWithOrOnSyntax<T> InUnitOfWorkScope<T>(this Ninject.Syntax.IBindingInSyntax<T> syntax) { }
        [System.ObsoleteAttribute(@"Support for external dependency injection containers is no longer provided by NServiceBus adapters for each container library. Instead, the NServiceBus.Extensions.DependencyInjection library provides the ability to use any container that conforms to the Microsoft.Extensions.DependencyInjection container abstraction. Will be treated as an error from version 8.0.0. Will be removed in version 9.0.0.", false)]
        public static Ninject.Syntax.IBindingInNamedWithOrOnSyntax<T> WhenInUnitOfWork<T>(this Ninject.Syntax.IBindingWhenSyntax<T> syntax) { }
        [System.ObsoleteAttribute(@"Support for external dependency injection containers is no longer provided by NServiceBus adapters for each container library. Instead, the NServiceBus.Extensions.DependencyInjection library provides the ability to use any container that conforms to the Microsoft.Extensions.DependencyInjection container abstraction. Will be treated as an error from version 8.0.0. Will be removed in version 9.0.0.", false)]
        public static Ninject.Syntax.IBindingInNamedWithOrOnSyntax<T> WhenNotInUnitOfWork<T>(this Ninject.Syntax.IBindingWhenSyntax<T> syntax) { }
    }
}